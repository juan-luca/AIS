using System;
using System.Collections.Generic;

using System.Text;
using System.Data;
using Comun;
using BusComun;
using System.Threading;


namespace BusInchost
{
    public class Telefonos : cBase 
    {
        public Telefonos(cConexion pconn)
        {
            conn = pconn;
        }

        public bool ProcesoTelefonos()
        {
            try
            {

                long nContTrat = 0;
                long nContOK = 0;

                string sClienteAnt = "";


                TelefonosDalc TelefonosD = new TelefonosDalc(conn);

                tyTelefono Telefono = new tyTelefono();
                List<tyTelefono> TelefonosCliente = new List<tyTelefono>();

                AISDataReader DrT = new AISDataReader();

                // Uso una segunda conexion a la base para el DataReader Principal
                cConexion connTelefonos = new cConexion(cGlobales.XMLConex);
                connTelefonos.Conectar();
                if (connTelefonos.Errores.Cantidad() != 0)
                {
                    cIncidencia.Generar(connTelefonos.Errores, "OPENBDTELE", "No se pudo abrir la conexion");
                }

                //Abro el cursor de Telefonos recibidos en la tabla de intercambio
                TelefonosDalc vTelefonoBD = new TelefonosDalc(connTelefonos);
                DrT = vTelefonoBD.AbrirCursorNuevosTelefonos();

                if (vTelefonoBD.Errores.Cantidad() != 0)
                {
                    cIncidencia.Generar(vTelefonoBD.Errores, "OPENTELE", "Error al abrir cursor de Telefonos");
                    return false;
                }

                // Establezco la cantidad de hilos que se van a utilizar y los creo 
                Hilos HilosTelefono = new Hilos(cGlobales.nTelefonosXHilo, cGlobales.nHilosTelefonos);

                // Conecto los hilos a la base de datos
                if (!HilosTelefono.ConectarHilosABaseDeDatos(cGlobales.XMLConex))
                    return false;

                /* Cargo en cada elemento del hilo todos los telefonos de cada cliente*/
                while (vTelefonoBD.FechTelefono(DrT, ref Telefono))
                {
                    nContTrat++;

                    if (sClienteAnt != Telefono.TECOD)
                    {
                        sClienteAnt = Telefono.TECOD;
                        if (TelefonosCliente.Count > 0)
                        {
                            if (!HilosTelefono.CargoElementoEnAlgunHilo(TelefonosCliente))
                                HilosTelefono.Arrancar(new ParameterizedThreadStart(this.FuncionArranqueHilo));
                        }
                        TelefonosCliente = new List<tyTelefono>();
                    }
                    TelefonosCliente.Add(Telefono);

                }
                /* Cargo los telefonos del ultimo cliente*/
                if (TelefonosCliente.Count>0) 
                        HilosTelefono.CargoElementoEnAlgunHilo(TelefonosCliente);

                HilosTelefono.Arrancar(new ParameterizedThreadStart(this.FuncionArranqueHilo));

                DrT.Close();
                connTelefonos.Desconectar();

                if (vTelefonoBD.Errores.Cantidad() != 0)
                    return false;
                else
                {
                    if (HilosTelefono.EjecucionDeLosHilosOk())
                    {
                        nContOK = HilosTelefono.ElemenosTratados();
                        nContTrat = HilosTelefono.ElemenosTratadosOk();

                        HilosTelefono.CommitDeLosHilos();
                        HilosTelefono.DesConectarHilosABaseDeDatos();
                        cIncidencia.Aviso("Telefonos: Tratados -> " + nContTrat.ToString() + " OK -> " + nContOK);
                        return true;
                    }
                    else
                    {
                        HilosTelefono.RollbackDeLosHilos();
                        HilosTelefono.DesConectarHilosABaseDeDatos();
                        return false;
                    }
                }
            }
            catch (Exception e)
            {
                cIncidencia.Aviso("Se produjo un error inesperado en la administracion de hilos. " + e.Message);
                return false;
            }

        }

        public void FuncionArranqueHilo(object obj)
        {
            Telefonos TelefonosActual;
            HiloAIS Hilo;


            Hilo = (HiloAIS)obj;
            TelefonosActual = new Telefonos(Hilo.Conexion);

            TelefonosActual.TratarListaDeTelefonosDeClientes(obj);

            return;
        }

        /*  obj es una lista de cliente, donde para cada cliente hay una lista de telefonos*/
        private void TratarListaDeTelefonosDeClientes(object obj)
        {
            HiloAIS Hilo;
            string sIncidencia = "";


            Hilo = (HiloAIS)obj;

            List<object> ListaClientes = Hilo.ListaElementosAIS;

            foreach (List<tyTelefono> ListaTelefonos in ListaClientes)
            {
                foreach (tyTelefono Telefono in ListaTelefonos)
                {
                    Hilo.nContTratados++;
                    if (TrataTelefono(Telefono))
                        Hilo.nContOk++;
                    else
                    {
                        sIncidencia = Telefono.TETIPOOPER + "|" + "TELE" + "|" + Telefono.TECOD;
                        cIncidencia.IncidenciaInterfaces(cGlobales.FicheroIncid, sIncidencia);
                    }                
                }
            }

            Hilo.bEjecutadoOk = (Hilo.bEjecutadoOk && true);

            return;            
        }

        private bool TrataTelefono(tyTelefono Telefono)
        {
            if (Telefono.TETIPOOPER == "A" || Telefono.TETIPOOPER == "M")
            {
                if (TratoAltaModifTele(Telefono))
                    return true;
                else
                    return true;
            }
            else if (Telefono.TETIPOOPER == "B")
            {
                if (TratoBajaTele(Telefono))
                    return true;
                else
                    return true;
            }
            else
                return false;

        }

        private bool TratoAltaModifTele(tyTelefono Telefono)
        {
            int nRes=0;

            TelefonosDalc TelDalc = new TelefonosDalc(conn);
            tyTelefono BDTelefono = new tyTelefono();

            BDTelefono.TECOD = Telefono.TECOD;
            BDTelefono.TECODTEL = Telefono.TECODTEL;
            BDTelefono.TETIPTEL = Telefono.TETIPTEL;

            nRes = TelDalc.ObtengoTelefonoBD(BDTelefono);

            if (nRes == 1) // Si no existe el telefono en la base de datos
            {
                // Tengo que insertar el nuevo telefono
                if (TelDalc.InsertaTelefonoBD(Telefono))
                    return true;
                else
                    return false;
            
            }
            else if (nRes == 2) // Si Existe el telefono en la base de datos
            {
                if (FueInvalidadoPorUsuarioEnLaBase(BDTelefono)) //Si fue invalidado por usuario en la base.
                {
                    // Si hay cambios en los datos del telefono entonces actualizo el registro
                    if (HayCambiosElContenidoDelRegistro(Telefono, BDTelefono))
                    {
                        if (TelDalc.ModificaTelefonoBD(Telefono))
                            return true;
                        else
                            return false;
                    }
                }
                else
                {
                    // Modifico el telefono con los datos recibidos en el archivo
                    if (TelDalc.ModificaTelefonoBD(Telefono))
                        return true;
                    else
                        return false;                
                }
            }
            else // Si hubo un error
                return false;

            return true;
        }

        private bool HayCambiosElContenidoDelRegistro(tyTelefono Telefono, tyTelefono BDTelefono)
        {
            bool nRet = false;

            nRet = nRet || (Telefono.TEEXT != BDTelefono.TEEXT);
            nRet = nRet || (Telefono.TECODPAIS != BDTelefono.TECODPAIS);
            nRet = nRet || (Telefono.TECODAREA != BDTelefono.TECODAREA);
            nRet = nRet || (Telefono.TENUMERO != BDTelefono.TENUMERO);

            return nRet;
            
        }

        private bool FueInvalidadoPorUsuarioEnLaBase(tyTelefono BDTelefono)
        {

            // Si el telefono no es valido y fue modificado por una persona 
            // Entonces el telefono fue invalidado por un usuario
            if (BDTelefono.TEVALIDO !="1" && BDTelefono.TEUSRMODIF !="")
                return true;
            else
                return false;
            
        }


        private bool TratoBajaTele(tyTelefono Telefono)
        {
            int nRes = 0;

            TelefonosDalc TelDalc = new TelefonosDalc(conn);
            tyTelefono BDTelefono = new tyTelefono();

            BDTelefono.TECOD = Telefono.TECOD;
            BDTelefono.TECODTEL = Telefono.TECODTEL;
            BDTelefono.TETIPTEL = Telefono.TETIPTEL;

            nRes = TelDalc.ObtengoTelefonoBD(BDTelefono);

            if (nRes == 2) // Si Existe el telefono en la base de datos
            {
                if (!FueInvalidadoPorUsuarioEnLaBase(BDTelefono)) //Si no fue invalidado por usuario en la base.
                {
                    if (!TelDalc.ClienteParaDarDeBajaBD(BDTelefono.TECOD))
                    {
                        // Si el cliente no esta marcado para dar de baja entonces
                        // corresponde a una baja real de telefonos
                        if (TelDalc.MarcoComoInvalidoElTelefonoBD(Telefono))
                            return true;
                        else
                            return false;
                    }
                }

                return true;
            }
            else if (nRes == 1) // Si No Existe el telefono en la base de datos
            {
                return true;
            }
            else // Si hubo un error
                return false;           
        }

    }
}
